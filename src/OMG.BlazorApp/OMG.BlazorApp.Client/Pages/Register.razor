@page "/register"
@layout AuthLayout
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using OMG.Core.Request
@using OMG.Core.Handler
@inject IAuthHandler AuthHandler
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Cadastro - OMG que Cheiro</PageTitle>

<MudPaper Elevation="10" Class="pa-8" Style="border-radius: 16px;">
    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true">
        Criar Conta
    </MudText>
    <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-6" Color="Color.Secondary">
        Preencha os dados para se cadastrar
    </MudText>

        <MudForm @ref="form" @bind-IsValid="@success">
            <MudTextField @bind-Value="nome" 
                          Label="Nome (Opcional)" 
                          Variant="Variant.Outlined" />

            <MudTextField @bind-Value="email" 
                          Label="Email" 
                          Variant="Variant.Outlined" 
                          Required="true" 
                          RequiredError="Email é obrigatório"
                          Validation="@(new EmailAddressAttribute() {ErrorMessage = "Email inválido"})"
                          Class="mt-4" />

            <MudTextField @bind-Value="password" 
                          Label="Senha" 
                          Variant="Variant.Outlined" 
                          InputType="InputType.Password" 
                          Required="true" 
                          RequiredError="Senha é obrigatória"
                          Class="mt-4" />

            <MudTextField @bind-Value="confirmPassword" 
                          Label="Confirmar Senha" 
                          Variant="Variant.Outlined" 
                          InputType="InputType.Password" 
                          Required="true" 
                          RequiredError="Confirmação de senha é obrigatória"
                          Class="mt-4" />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-4">@errorMessage</MudAlert>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <MudAlert Severity="Severity.Success" Class="mt-4">@successMessage</MudAlert>
            }

            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       FullWidth="true" 
                       Class="mt-6"
                       OnClick="HandleRegister"
                       Disabled="@isLoading">
                @if (isLoading)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ml-2">Cadastrando...</MudText>
                }
                else
                {
                    <text>Cadastrar</text>
                }
            </MudButton>

            <MudDivider Class="my-4" />

            <MudButton Variant="Variant.Text" 
                       Color="Color.Secondary" 
                       FullWidth="true"
                       OnClick="@(() => Navigation.NavigateTo("/login"))">
                Já tem conta? Faça login
            </MudButton>
        </MudForm>
    </MudPaper>

@code {
    private MudForm? form;
    private bool success;
    private string nome = string.Empty;
    private string email = string.Empty;
    private string password = string.Empty;
    private string confirmPassword = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleRegister()
    {
        await form!.Validate();

        if (!success)
            return;

        if (password != confirmPassword)
        {
            errorMessage = "As senhas não coincidem";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var request = new RegisterRequest(email, password, confirmPassword, nome);
            var response = await AuthHandler.RegisterAsync(request);

            if (response.Success)
            {
                successMessage = response.Message ?? "Cadastro realizado com sucesso!";
                
                // Aguardar 2 segundos e redirecionar para o login
                await Task.Delay(2000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                errorMessage = response.Message ?? "Erro ao cadastrar";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao cadastrar: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
