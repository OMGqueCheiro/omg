@using OMG.Core.Entities
@using System.Globalization

@inject IDialogService DialogService
@inject ISnackbar _snackbar
@inject IPedidoHandler _pedidoHandler
@inject IBaseSearchHandler<Cliente> _searchClienteHandler
@inject IBaseSearchHandler<Produto> _searchProdutoHandler
@inject IBaseSearchHandler<Formato> _searchFormatoHandler
@inject IBaseSearchHandler<Aroma> _searchAromaHandler
@inject IBaseSearchHandler<Cor> _searchCorHandler
@inject IBaseSearchHandler<Embalagem> _searchEmbalagemHandler

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h4">
            Novo Pedido
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid Spacing="2" Justify="Justify.Center">
            <MudDivider DividerType="DividerType.FullWidth" />
            <MudItem xs="12">
                <MudText Typo="Typo.h6">Cliente</MudText>
            </MudItem>
            <MudItem xs="6">
                <MudAutocomplete T="Cliente" Label="Nome" @bind-Value="ClienteModel" SearchFunc="@SearchCliente" @ref="mudAutocompleteCliente"
                                 ResetValueOnEmptyText="true" ShowProgressIndicator="true" Clearable
                                 CoerceText="true" CoerceValue="true" ToStringFunc="@(e=> e==null?null : $"{e.Nome}")" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField @bind-Value="ClienteModel.Telefone" Label="Telefone" Variant="Variant.Filled" Disabled></MudTextField>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="ClienteModel.Endereco" Label="Endereço" Variant="Variant.Filled" Disabled></MudTextField>
            </MudItem>
            <MudDivider DividerType="DividerType.FullWidth" />
            <MudItem xs="12">
                <MudText Typo="Typo.h6">Itens</MudText>
            </MudItem>
            <MudItem xs="3">
                <MudForm align-center @ref="formNewModel">
                    <MudNumericField @bind-Value="quantidadeValue" Label="Quantidade" Variant="Variant.Filled" Min="1" />
                    <MudAutocomplete T="string" Label="Produto" @bind-Value="produtoValue" SearchFunc="@SearchProduto" ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="true" Required />
                    <MudAutocomplete T="string" Label="Formato" @bind-Value="formatoValue" SearchFunc="@SearchFormato" ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="true" Required />
                    <MudAutocomplete T="string" Label="Aroma" @bind-Value="aromaValue" SearchFunc="@SearchAroma" ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="true" Required />
                    <MudAutocomplete T="string" Label="Cor" @bind-Value="corValue" SearchFunc="@SearchCor" ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="true" Required />
                    <MudAutocomplete T="string" Label="Embalagem" @bind-Value="embalagemValue" SearchFunc="@SearchEmbalagem" ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="true" Required />
                    <MudIconButton Size="@Size.Large" OnClick="(()=> AddItem())" Icon="@Icons.Material.Filled.AddCircle" />
                </MudForm>
            </MudItem>

            <MudItem xs="9">
                <MudDataGrid T="NewPedidoItemRequest" Items="@PedidoRequest.Itens" ReadOnly="false" SortMode="@SortMode.Single" Hover Dense Bordered EditMode="DataGridEditMode.Cell">
                    <Columns>
                        <PropertyColumn Property="x => x.Quantidade" />
                        <PropertyColumn Property="x => x.Produto" />
                        <PropertyColumn Property="x => x.Formato" />
                        <PropertyColumn Property="x => x.Aroma" />
                        <PropertyColumn Property="x => x.Cor" />
                        <PropertyColumn Property="x => x.Embalagem" />
                        <TemplateColumn CellClass="justify-end">
                            <EditTemplate>
                                <MudIconButton Size="@Size.Medium" Icon="@Icons.Material.Filled.Delete" OnClick="(() => DeleteItem(context.Item))" />
                            </EditTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudItem>
            <MudDivider DividerType="DividerType.FullWidth" />
            <MudItem xs="2">
                <MudDatePicker @bind-Date="PedidoRequest.DataEntrega" Label="Data da entrega" />
            </MudItem>
            <MudItem xs="2">
                <MudNumericField @bind-Value="PedidoRequest.ValorTotal" Label="Valor Total" Variant="Variant.Filled" Min="0M" Culture="_culture" Format="N2" HideSpinButtons="true" />
            </MudItem>
            <MudItem xs="2">
                <MudNumericField @bind-Value="PedidoRequest.ValorDesconto" Label="Desconto" Variant="Variant.Filled" Min="0M" Culture="_culture" Format="N2" HideSpinButtons="true" />
            </MudItem>
            <MudItem xs="2">
                <MudNumericField @bind-Value="PedidoRequest.ValorEntrada" Label="Entrada" Variant="Variant.Filled" Min="0M" Culture="_culture" Format="N2" HideSpinButtons="true" />
            </MudItem>
            <MudItem xs="2">
                <MudCheckBox @bind-Value="PedidoRequest.IsPermuta">É Permuta</MudCheckBox>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Salvar">Salvar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;

    CultureInfo _culture = CultureInfo.GetCultureInfo("pt-BR");

    private Cliente _cliente = new Cliente();

    public Cliente ClienteModel
    {
        get { return _cliente ?? new Cliente(); }
        set { _cliente = value ?? new Cliente(); }
    }

    MudAutocomplete<Cliente>? mudAutocompleteCliente { get; set; }

    public NewPedidoRequest PedidoRequest = new NewPedidoRequest();


    private async Task<IEnumerable<Cliente>> SearchCliente(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return (await _searchClienteHandler.GetAll("Cliente"))?.Data ?? Array.Empty<Cliente>();
        return (await _searchClienteHandler.GetAll("Cliente", value))?.Data ?? Array.Empty<Cliente>();
    }

    private async void Salvar()
    {
        PedidoRequest.ClienteId = ClienteModel.Id;
        var response = await _pedidoHandler.NewPedido(PedidoRequest);

        if (response.IsSuccess)
        {
            
            MudDialog.Close(DialogResult.Ok(response.Data));
        }
        else
        {

            _snackbar.Add(response.Message, Severity.Error);
            MudDialog.Close();
        }
    }

    protected override void OnInitialized()
    {
		MudDialog.SetOptionsAsync(MudDialog.Options with
			{
				FullWidth = true,
				MaxWidth = MaxWidth.ExtraLarge,
				BackdropClick = false,
				CloseButton = true,
			});

        base.OnInitialized();
    }

    MudForm? formNewModel;

    void DeleteItem(NewPedidoItemRequest pedidoItem) => PedidoRequest.Itens.Remove(pedidoItem);

    void AddItem()
    {
        formNewModel?.Validate();

        if (formNewModel?.IsValid != true)
            return;

        PedidoRequest.Itens.Add(new NewPedidoItemRequest(quantidadeValue, produtoValue, formatoValue, corValue, aromaValue, embalagemValue));
        resetItemValues();
    }

    void resetItemValues()
    {
        quantidadeValue = 1;
        produtoValue = string.Empty;
        formatoValue = string.Empty;
        corValue = string.Empty;
        aromaValue = string.Empty;
        embalagemValue = string.Empty;
    }

    int quantidadeValue { get; set; } = 1;

    string produtoValue { get; set; } = string.Empty;
    private Task<IEnumerable<string>> SearchProduto(string value, CancellationToken token)
        => SearchEntity(_searchProdutoHandler, "Produto", value, x => x.Descricao);

    string formatoValue { get; set; } = string.Empty;
    private Task<IEnumerable<string>> SearchFormato(string value, CancellationToken token)
        => SearchEntity(_searchFormatoHandler, "Formato", value, x => x.Descricao);

    string aromaValue { get; set; } = string.Empty;
    private Task<IEnumerable<string>> SearchAroma(string value, CancellationToken token)
        => SearchEntity(_searchAromaHandler, "Aroma", value, x => x.Nome);

    string corValue { get; set; } = string.Empty;
    private Task<IEnumerable<string>> SearchCor(string value, CancellationToken token)
        => SearchEntity(_searchCorHandler, "Cor", value, x => x.Nome);

    string embalagemValue { get; set; } = string.Empty;
    private Task<IEnumerable<string>> SearchEmbalagem(string value, CancellationToken token)
        => SearchEntity(_searchEmbalagemHandler, "Embalagem", value, x => x.Descricao);

    /// <summary>
    /// Método genérico para buscar entidades e mapear para string
    /// </summary>
    private async Task<IEnumerable<string>> SearchEntity<T>(
        IBaseSearchHandler<T> handler,
        string urlAction,
        string value,
        Func<T, string> selector)
    {
        var response = string.IsNullOrEmpty(value)
            ? await handler.GetAll(urlAction)
            : await handler.GetAll(urlAction, value);

        return response?.Data?.Select(selector) ?? Array.Empty<string>();
    }

}