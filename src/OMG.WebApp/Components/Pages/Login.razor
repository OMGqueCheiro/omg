@page "/login"
@layout AuthLayout
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using OMG.Domain.Request
@using OMG.WebApp.Handler
@using OMG.WebApp.Authentication
@inject IAuthHandler AuthHandler
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<Login> Logger
@rendermode InteractiveServer

<PageTitle>Login - OMG que Cheiro</PageTitle>
<MudPaper Elevation="10" Class="pa-8" Style="border-radius: 16px;">
    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true">
        Bem-vindo!
    </MudText>
    <MudText Typo="Typo.body1" Align="Align.Center" Class="mb-6" Color="Color.Secondary">
        Entre com suas credenciais
    </MudText>

        <MudForm @ref="form" @bind-IsValid="@success">
            <MudTextField @bind-Value="email" 
                          Label="Email" 
                          Variant="Variant.Outlined" 
                          Required="true" 
                          RequiredError="Email √© obrigat√≥rio"
                          Validation="@(new EmailAddressAttribute() {ErrorMessage = "Email inv√°lido"})" />

            <MudTextField @bind-Value="password" 
                          Label="Senha" 
                          Variant="Variant.Outlined" 
                          InputType="InputType.Password" 
                          Required="true" 
                          RequiredError="Senha √© obrigat√≥ria"
                          Class="mt-4" />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-4">@errorMessage</MudAlert>
            }

            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       FullWidth="true" 
                       Class="mt-6"
                       OnClick="HandleLogin"
                       Disabled="@isLoading">
                @if (isLoading)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ml-2">Entrando...</MudText>
                }
                else
                {
                    <text>Entrar</text>
                }
            </MudButton>

            <MudDivider Class="my-4" />

            <MudButton Variant="Variant.Text" 
                       Color="Color.Secondary" 
                       FullWidth="true"
                       OnClick="@(() => Navigation.NavigateTo("/register"))">
                N√£o tem conta? Cadastre-se
            </MudButton>
        </MudForm>
    </MudPaper>

@code {
    private MudForm? form;
    private bool success;
    private string email = string.Empty;
    private string password = string.Empty;
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        Logger.LogInformation("üîê Iniciando processo de login para: {Email}", email);
        
        await form!.Validate();
        if (!success)
        {
            Logger.LogWarning("‚ö†Ô∏è Formul√°rio de login inv√°lido");
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var loginRequest = new LoginRequest(email, password);
            
            Logger.LogInformation("üì° Chamando API de login...");
            var response = await AuthHandler.LoginAsync(loginRequest);
            
            Logger.LogInformation("‚úÖ Login bem-sucedido! Token recebido (tamanho: {Length})", response.Token?.Length ?? 0);
            if (response.Token != null && response.Token.Length >= 20)
            {
                Logger.LogInformation("üîë Primeiros caracteres do token: {TokenStart}", response.Token[..20]);
            }
            
            await NotifyUserAuthentication(response.Token!);
            
            Logger.LogInformation("üè† Redirecionando para home...");
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "‚ùå Erro durante login");
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task NotifyUserAuthentication(string token)
    {
        Logger.LogInformation("üîî Notificando autentica√ß√£o com token (tamanho: {Length})", token.Length);
        
        var authProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await authProvider.NotifyUserAuthentication(token);
        
        Logger.LogInformation("‚úÖ Autentica√ß√£o notificada com sucesso");
    }
}
