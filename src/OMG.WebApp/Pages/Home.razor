@page "/"
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using OMG.WebApp.Components.Pedido
@inject IPedidoHandler _pedidoHandler
@inject IDialogService DialogService

<PageTitle>Pedidos</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Pedidos</MudText>

<MudButton Variant="Variant.Filled" Class="pa-4 ma-4" Color="Color.Primary" OnClick="OpenModalNewPedido">Novo Pedido</MudButton>

<MudDropContainer T="PedidoCard" @ref="_dropContainer" Items="@_pedidos" ItemsSelector="@((item,column) => item.Status.ToString() == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
    <ChildContent>
        @foreach (var item in _sections)
{
    <MudPaper Elevation="0" Width="25%" MinHeight="100%" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
                <MudToolBar Gutters="false">
                    <MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
                </MudToolBar>
                <MudDropZone T="PedidoCard" Identifier="@item.PedidoStatus.ToString()" Class="mud-height-full" />
            </MudPaper>
}
    </ChildContent>
    <ItemRenderer>
        <OMG.WebApp.Components.Pedido.PedidoCardView Item="@context" />
    </ItemRenderer>
</MudDropContainer>
@code {

private MudDropContainer<PedidoCard>? _dropContainer;

/* handling board events */
private async Task TaskUpdated(MudItemDropInfo<PedidoCard> info)
{
if (info.Item == null)
return;

if (info.Item.Status == Enum.Parse<EPedidoStatus>(info.DropzoneIdentifier))
return;

var resultApi = await _pedidoHandler.ChangeStatus(new PedidoChangeStatusRequest(info.Item.PedidoId, Enum.Parse<EPedidoStatus>(info.DropzoneIdentifier)));

if (resultApi.IsSuccess)
info.Item.Status = Enum.Parse<EPedidoStatus>(info.DropzoneIdentifier);
}

/* Setup for board  */
private List<PedidoKanbanSection> _sections = new()
{
new PedidoKanbanSection("Novo", EPedidoStatus.Novo),
new PedidoKanbanSection("Em Produção",EPedidoStatus.Producao),
new PedidoKanbanSection("Pronto", EPedidoStatus.Pronto),
new PedidoKanbanSection("Entregue", EPedidoStatus.Entregue),
};

public class PedidoKanbanSection
{
public PedidoKanbanSection(string name, EPedidoStatus pedidoStatus)
{
Name = name;
PedidoStatus = pedidoStatus;
}

public string Name { get; init; }
public EPedidoStatus PedidoStatus { get; set; }
}

private List<PedidoCard> _pedidos = new() { };

protected override async Task OnInitializedAsync()
{
await base.OnInitializedAsync();

var resultApi = await _pedidoHandler.GetPedidoCardList();
if (resultApi.IsSuccess && resultApi.Data != null && resultApi.Data.Any())
_pedidos.AddRange(resultApi.Data);

_dropContainer?.Refresh();

}

private void AddTask(PedidoKanbanSection section)
{
_pedidos.Add(new PedidoCard());
_dropContainer?.Refresh();
}

private async Task OpenModalNewPedido()
{
var dialog = await DialogService.ShowAsync<PedidoNewModalView>("PedidoNew");
}
}